{
  
    
        "post0": {
            "title": "Calibration Explained",
            "content": "While working on deep learning projects, I observed that confidence scores of deep learning models (for classification tasks) were extremely high while the model performed well on metrics like validation accuracy, AUROC, etc. I realized that this was a problem because the confidence score of the model on any out-of-distribution data was over 90%. This was a problem of miscalibration, and this post will be an attempt to summarise the paper, On Calibration of Modern Neural Networks which tries to understand the topic of calibration in detail. . Introduction to Calibration . Calibration refers to probability estimates of a deep neural network being representative of the true correctness likelihood. For example, given 100 predictions each with a confidence estimate of 0.8, 80 of them should be correctly classified. Therefore, for a perfectly calibrated model, the average accuracy should match the average confidence estimate . While modern neural networks have become more accurate, they are mostly poorly calibrated. The Figure from the paper compares a 5-layer LeNet with a 110 layer ResNet on CIFAR-100 dataset. Based on the definition of calibration, it is essential that average accuracy of a model matches the average confidence in the best case situation. While LeNet has the average confidence close to the accuracy, the average confidence of a ResNet is much higher than the accuracy. . Figure 1. Confidence Histograms for a 5-layer LeNet (left) and a 110-layer ResNet (right) on CIFAR-100. Why is Miscalibration an Issue? An uncalibrated model cannot distinguish between in-distribution and out-of-distribution samples. For example, DNNs trained to classify MNIST images often produce high confident probability 91% even for random noise (see the work of (Hendrycks &amp; Gimpel, 2016)). . Methods To Quantify and Visualize Calibration . The following methods are used to visualize and quantify calibration. . Reliability diagrams | Expected Calibration Error (ECE) | Maximum Calibration Error (MCE) | Reliability Diagrams : Visual Representation of Model Calibration . Figure 2. Reliability diagrams (bottom) for a 5-layer LeNet (left) and a 110-layer ResNet (right) on CIFAR-100. A reliability diagram plots the expected accuracy as a function of confidence. For a finite set of samples, the confidences can be grouped into MMM bins (each of size 1/M1/M1/M), and the average accuracy for each group can be calculated accordingly. Let BmB_mBm​ be the set of indices whose predictions falls in the interval Im=(m−1M,mM)I_m = ( frac{m-1}{M}, frac{m}{M})Im​=(Mm−1​,Mm​), the expected accuracy for that interval would be, . begin{equation} acc(B_m) = frac{1}{|B_m|} sum_{i epsilon B_m}1( hat{y_i} = y_i) end{equation} . For examples, if we have take all the predictions between 0.3 and 0.4, we calculate the accuracy for this bin as the number of correct predictions (based on a threshold) divided by the number of samples in this bin. For a perfectly calibrated model, the expected accuracy for each bin would be equal to the average confidence value of that bin, thereby plotting an identity function. Any deviation from the identity function would represent miscalibration. . Expected Calibration Error (ECE) . If we take an average of all the gaps (defined by the difference in average accuracy and confidence for a bin) that are present in the reliability diagram (look at the right plot in figure 2.), we get the expected calibration error. From a mathematical perspective, Expected Calibration Error is a scalar summary statistic of calibration and it follows, . begin{equation} E_{ hat{p}}[|P( hat{Y} = Y | hat{P} = p) - p|] end{equation} . An emperical form of (2)(2)(2) can be approximated by partitioning predicted confidences into M equally spaced bins (similar to reliability diagrams) and taking a weighted average of the bins’ accuracy/confidence difference. . begin{equation} ECE = sum_{i=m}^{M} frac{|B_m|}{n}|acc(B_m) - conf(B_m)| end{equation} . Maximum Calibration Error (MCE) . The highest gap in the reliability diagram is the Maximum Calibration Error. This is a useful measure for high risk applications where reliable probability estimates are needed. It is the maximum deviation between bin accuracy and confidence. The exact mathematical form (444), . begin{equation} max_{p epsilon [0, 1]}|P( hat{Y} = Y | hat{P} = p) - p| end{equation} . An emperical form of (4)(4)(4) can be approximated similarly to (3)(3)(3), . begin{equation} ECE = max_{m epsilon{{1,…,M}}}|acc(B_m) - conf(B_m)| end{equation} . Note: We can visualize both MCE and ECE on reliability diagrams. MCE is the largest calibration gap (red bars) across all bins, whereas ECE is a weighted average of all gaps. For perfectly calibrated classifiers, MCE and ECE both equal 0. . Temperature Scaling . The main contribution of this paper is the technique, Temperature Scaling which is a post training approach to calibrate predictions of a model. We’ll go through some concepts before discussing the exact method, making it easier to digest temperature scaling. . Softmax Function with Temperature: The softmax function (σSM sigma_{SM}σSM​) usually used as an activation function to go from logits to probabilistic outputs. For instance, for a classification problem involving more than K&gt;2K &gt; 2K&gt;2 Classes, the network produces an output logit ziz_izi​, class prediction yi^ hat{y_i}yi​^​ and confidence score pi^ hat{p_i}pi​^​ for each input xix_ixi​. The network logits ziz_izi​ are vectors, where yi^=argmaxk zik hat{y_i} = argmax_k space z_i^{k}yi​^​=argmaxk​ zik​, and pi^ hat{p_i}pi​^​ is derived using the softmax function σSM sigma_{SM}σSM​. (The temperature term TTT is usually set to 1). . begin{equation} sigma_{SM}(z_i)^{(k)} = frac{ exp(z_i^{(k)}/ T)}{ sum_{j=1}^{K} exp(z_i^{(j)}/ T)} end{equation} . Varying the temperature term can make the softmax outputs smoother (higher TTT) or peaky (lower TTT). If T→∞T rightarrow inftyT→∞, the softmax function becomes a uniform distribution with the output being 1/K1/K1/K, whereas if T→0T rightarrow 0T→0, the output becomes a point mass. . Intuition of the method proposed (Temperature Scaling): The intuition of the method proposed in this paper is as follows. If our model confidence scores are too high (in other words peaky), then it might mean that moving towards a temperature scaling value ($T$) that is higher (reducing the peakiness) might help calibrate the model predictions. . Platt Scaling: The paper (Platt, John et al.) introduces a parametric approach where non-probabilistic predictions (logits) of a binary classifier are used as features for a logistic regression model. The method learns scalar parameters a, b ϵ Ra, space b space large epsilon space mathbb{R}a, b ϵ R and outputs qi^=σ(azi+b) hat{q_i}= sigma(az_i + b)qi​^​=σ(azi​+b) as the calibrated probability. The logistic regression model is trained on the validation set and the loss used is negative log likelihood (NLL) to tune the scalar parameters. . Temperature Scaling (Extension of Platt Scaling): This is a simple single parameter extension of Platt Scaling where we aim to learn the temperature paramter T&gt;0T &gt; 0T&gt;0 for all the classes in the softmax function. Given the logit vector ziz_izi​, the calibrated output now becomes, . begin{equation} hat{q_i} = max_{k} frac{ exp(z_i^{(k)}/ T)}{ sum_{j=1}^{K} exp(z_i^{(j)}/ T)} end{equation} . where T is optimized with respect to NLL on the validation set. As temperature scaling does not affect the maximum of the softmax, the class prediction yi^ hat{y_i}yi​^​ and accuracy of the model should remain the same. . Why Logistic Regression: The reason for choosing to fine-tune with a logistic regression model is that, the outputs of a logistic regressor is calibrated. To understand why this is true, let’s first look at the logistic regression setting. . The loss function for logistic regression is the standard negative log likelihood function . begin{equation} J( theta) = - frac{1}{m} sum_{i=1}^{M}[y^{(i)} log(h_{ theta}(x^{(i)})) space + space (1 - y^{(i)}) log{(1 - h_{ theta}(x^{(i)}))} ] nonumber end{equation} . Where we get the output by passing the θTx(i) theta^Tx^{(i)}θTx(i) through a sigmoid function (α alphaα is the bias term), . begin{equation} h_{ theta}(x^{(i)}) = frac{1}{1 + exp(- alpha - sum_j theta_{j}x_j^{(i)})} nonumber end{equation} . Since we want to minimize the loss function with respect to θ thetaθ, we take a partial derivative with respect to θ thetaθ, . begin{equation} frac{ partial{J( theta)}}{ partial{ theta}} = - frac{1}{m} sum_{i=1}^{M}[ frac{y^{(i)}}{h_{ theta}(x^{(i)})} - frac{(1 - y^{(i)})}{1 - h_{ theta}(x^{(i)})}] frac{ partial{h_{ theta}(x^{(i)})}}{ partial{ theta}} nonumber end{equation} . begin{equation} =- frac{1}{m} sum_{i=1}^{M}[ frac{y^{(i)} - h_{ theta}(x^{(i)})}{h_{ theta}(x^{(i)})(1 - h_{ theta}(x^{(i)}))}] frac{ partial{h_{ theta}(x^{(i)})}}{ partial{ theta}} nonumber end{equation} . If we take a partial derivative of the softmax output hθ(x(i))h_{ theta}(x^{(i)})hθ​(x(i)), . begin{equation} frac{ partial{h_{ theta}(x^{(i)})}}{ partial{ theta}} = -( frac{1}{1 + exp(- alpha - sum_j theta_{j}x_j^{(i)})})^2 * exp(- alpha - sum_j theta_{j}x_j^{(i)}) * frac{ partial(- alpha- sum_j theta_{j}x_j^{(i)})}{ partial{ theta}} nonumber end{equation} begin{equation} =h_{ theta}(x^{(i)})(1 - h_{ theta}(x^{(i)})) * frac{ partial(- alpha - sum_j theta_{j}x_j^{(i)})}{ partial{ theta}} nonumber end{equation} . If we replace the above in the ∂J(θ)∂θ frac{ partial{J( theta)}}{ partial{ theta}}∂θ∂J(θ)​, equation, . begin{equation} frac{ partial{J( theta)}}{ partial{ theta}} = - frac{1}{m} sum_{i=1}^{M}(y^{(i)} - h_{ theta}(x^{(i)}) frac{ partial(- alpha - sum_j theta_{j}x_j^{(i)})}{ partial{ theta}} nonumber end{equation} . For a fully trained model, as ∂J(θ)∂θj frac{ partial{J( theta)}}{ partial{ theta_j}}∂θj​∂J(θ)​ would be 000 for each θj theta_{j}θj​, if we look at θ0=α theta_{0} = alphaθ0​=α and set ∂J(θ)∂θ0=0 frac{ partial{J( theta)}}{ partial{ theta_0}} = 0∂θ0​∂J(θ)​=0, . begin{equation} frac{ partial{J( theta)}}{ partial{ theta_j}} = - frac{1}{m} sum_{i=1}^{M}(y^{(i)} - h_{ theta}(x^{(i)}) = 0 nonumber end{equation} . begin{equation} sum_{i=1}^{M}h_{ theta}(x^{(i)}) = sum_{i=1}^{M}y^{(i)} nonumber end{equation} . The above expression means that the average sigmoid outputs (∑i=1Mhθ(x(i)) sum_{i=1}^{M}h_{ theta}(x^{(i)})∑i=1M​hθ​(x(i))) will be equal to accuracy of the model which satisfies the calibration condition. . Entropy Maximization Perspective: Why Temperature Scaling helps increase Entropy? . Our usual training process for a classification problem involves minimizing the cross entropy loss using the predicted probaility pi^ hat{p_i}pi​^​ and the one-hot labels yiy_iyi​. While minimizing this loss, we bring the predicted distribution pi^ hat{p_i}pi​^​ closer to the one-hot true label vector yiy_iyi​ (as minimizing cross entropy is equivalent to minizing KL divergence). . The entropy of the predicted probability (H(pi^)=−pi^ log(pi^) mathbb{H}( hat{p_i}) = - hat{p_i} space log( hat{p_i})H(pi​^​)=−pi​^​ log(pi​^​)) is 0 when pi^ hat{p_i}pi​^​ perfectly matches yiy_iyi​ while it is maximum when pi^ hat{p_i}pi​^​ is a uniform distribution. Therefore, temperature scaling will not only help in increasing entropy as we move away from a peaky distribution to a more uniform version of it. Therefore, we can think of this process of temperature scaling/entropy maximization as a form of regularization. . In the figure below, we can see that effect of calibration on the Validation Set (i.e. optimizing T with respect to NLL). Two points to note, . Look at how the blue line indicates the pre-calibration entropy decreasing with epochs (overfitting) and the optimal T increasing (to undo the overfitting effect). | The post-calibration entropy lies above the pre-calibration entropy line indicating the effect of Temperature Scaling | . Figure 3. Entropy and NLL for CIFAR-100 before and after calibration. The optimal T selected by temperature scaling rises throughout optimization, as the pre-calibration entropy decreases steadily. The post-calibration entropy and NLL on the validation set coincide (which can be derived from the gradient optimality condition of T ). References: . On Calibration of Modern Neural Networks Link | Gradient-Based Learning Applied to Document Recognition Link | Probabilistic outputs for support vector machines and comparisons to regularized likelihood methods Link | Deep residual learning for image recognition Link | Why logistic regression produces calibrated outputs? Link |",
            "url": "https://shenoynikhil.github.io/blog/2022/01/31/calibration.html",
            "relUrl": "/2022/01/31/calibration.html",
            "date": " • Jan 31, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shenoynikhil.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shenoynikhil.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://shenoynikhil.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shenoynikhil.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}