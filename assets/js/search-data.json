{
  
    
        "post0": {
            "title": "Deriving ELBO in different ways",
            "content": "This blog will basically go through different ways of deriving the objective function (called the Variational Lower Bound or ELBO) for a Variational Autoencoder (VAE), a type of generative model. . Introduction: Latent Variable Models . Latent variable models are basically a class of generative models, where we try to model $p(x)$. The setting/assumptions under which they work are as follows, . A latent/hidden variable ($z in mathcal{Z}$) is responsible for generating Images ($x in mathcal{X}$) | It is easy to sample from the distribution $P(z)$ over $ mathcal{Z}$ | A family of deterministic functions $f(z; theta)$, parametrized by a vector $ theta$ , where $f: mathcal{Z} times theta rightarrow mathcal{X}$ | Basically, what this means is, if we sample $z$ from $P(z)$, and run it through $f(z; theta)$ we should generate samples that look like they are from $P(X)$. These models aim to maximize to probability of each $X$ in the training set and therefore estimate parameters using maximum likelihood estimation given the generative process, . $$ P(X) = int P(X|z; theta)P(z)dz $$In VAEs specifically, . Output distribution $P(x|z)$ after running it through $f(z; theta)$ (typically a neural network) is a gaussian distribution $$ P(x|z; theta) sim mathcal{N}(X|f(z; theta), sigma^2I) $$ where $ sigma$ is an hyperparameter . | Distribution over the latent variable $P(z) = mathcal{N}(0, I)$ . | . The idea is that if a latent structure exists, the neural network would be able to map the normally distributed $z$ to the latent values (For instance, the value of the digit, position in MNIST) in the first few layers and then use the later layers to generate images that have those latent values. . Therefore, a way to estimate the $ theta$ in the above $P(x|z; theta)$ is to, . Sample a number of $z$ values | For each $z_i$ compute $f(z_i; theta)$ | Use the Monte Carlo Estimate to compute $P(X) = frac{1}{n} sum_iP(X|z_i)$ given the values from step 2 | To maximize this $P(X)$, we can minimize the squared distance between $f(z)$ and $X$ (minimizing the negative log likelihood is equivalent to minimizing the squared euclidean distance between $f(z)$ and $X$ [Proof]) and use gradient descent to estimate the parameters ( $ theta$ essentially the neural network weights). A visual description of the process is as follows, . Fig 1. VAE as a Graphical Model Why does this training strategy have a problem? if we take an example of a generative model to predict the digit 2, Figure 2(a) is the target image (X) for which we are trying to find P(X) for. . Observation: There is a stark difference between simple euclidean distance and perceptual distance. The prediction Figure 2(b) should be a worse prediction than Figure 2(c) (which is just shifting the digit towards down and right). However the contribution of Figure 2(b) in the likelihood would be more with respect to Figure 2(c) as the euclidean distance between the target and Figure 2(b) is 0.0387 while it is 0.2639 between the target and Figure 2(c). . Two ways to avoid a situation like this, . One way could be to keep a small value of $ sigma$ in equation 2 (low value of $ sigma$ means euclidean distance is high unless it is very similar to $X$) so as to only allow very similar images to be generated. This means we would need a lot of $z$‘s to be able to generate something similar to $X$ and therefore contribute to likelihood ($P(X)$). | Another solution is to change the similarity metric (which is euclidean distance currently) so as to generate more similar samples. Fig.2 It’s hard to measure the likelihood of images under a model using only sampling. Given an image X (a), the middle sample (b) is much closer in Euclidean distance than the one on the right (c). Because pixel distance is so different from perceptual distance, a sample needs to be extremely close in pixel distance to a datapoint X before it can be considered evidence that X is likely under the model. Reference Paper: https://arxiv.org/pdf/1606.05908.pdf | . What can be done differently / what do VAEs do differently ? . Change the sampling strategy such that the sampled $z$ that are more likely to have produced $X$. Therefore, if we could sample from the true posterior distribution $p(z|X)$, we could assume we are generating $z$ that are likely to produce $X$. A slight problem that arises here, $$ p(z|X) = frac{p(x|z; theta)p(z)}{ int p(x|z&#39;; theta)p(z&#39;)dz} = frac{p(x|z; theta)p(z)}{ int N(x|f(z&#39;; theta), sigma^2I)N(0, I)dz} $$ . The posterior is intractable as getting a closed form expression for the denominator $ int N(x|f(z&#39;; theta), sigma^2I)N(0, I)$ in the above equation is not possible as the mean of the left term $f(z&#39;; theta)$ is a neural network and computing a closed form expression using standard methods is difficult. Therefore, instead of drawing samples from $p(z|x)$, we draw from $q(z|x)$ which is an approximation of the true posterior. However, if we sample from an arbitrary distribution $q(z|x)$ and not from $N(0, I)$, how do we optimize $p(x)$? . We use the variational lower bound (ELBO) to optimize $P(X)$ while sampling $z$ from $q(z|x; phi)$. There are different ways we can derive the ELBO to understand its need. Let’s go through them one by one. . What’s $ phi$ in $q(z|x; phi)$? We generally use a neural network for $q(z|x; phi)$. Therefore, $ phi$ are the neural network parameters that are used in the sampling process. . Method 1: Maximizing the Log Likelihood ($ log P(X)$) . We can write $p(x)$ as the following expectation using joint probability and conditional probability, . $$ log p(x) = log int p(x, z; theta)dz = log int p(x|z; theta)p(z)dz = log mathbb{E}_{z sim p(z)} left[p(x|z) right] $$On dividing and multiplying with the approximate posterior distribution $q(z|x; phi)$, . $$ log p(x) = log int p(x, z; theta) frac{q(z|x; phi)}{q(z|x; phi)}dz = log left( mathbb{E}_{z sim q(z|x; phi)} left[ frac{p(x, z; theta)}{q(z|x; phi)} right] right) $$The above term can be modified using Jensen’s Inequality ($ log mathbb{E}(X) geq mathbb{E}( log(X))$. It applies here since $ log$ is a concave function, read more here) . $$ log p(x) = log left( mathbb{E}_{z sim q(z|x; phi)} left[ frac{p(x, z; theta)}{q(z|x; phi)} right] right) geq mathbb{E}_{z sim q(z|x; phi)} left[ log frac{p(x, z; theta)}{q(z|x; phi)} right] $$$$ log p(x) geq mathbb{E}_{z sim q(z|x; phi)} left[ log frac{p(x, z; theta)}{q(z|x; phi)} right] tag{1} $$The expectation term post Jensen’s Inequality on the right side is known as the variational lower bound (ELBO). It is a lower bound on the $ log P(X)$ and the bound is tight when the approximated posterior $q(z|x)$ matches the true posterior $p(z|x)$ (replace the $q(z|x)$ term with $p(z|x)$ in the right hand side). . If we try to break apart the ELBO term using Baye’s rule, . $$ begin{aligned} mathbb{E}_{z sim q(z|x; phi)} left[ log frac{p(x, z; theta)}{q(z|x; phi)} right]&amp; = mathbb{E}_{z sim q(z|x; phi)} left[ log frac{p(x|z; theta)p(z)}{q(z|x; phi)} right] &amp; = mathbb{E}_{z sim q(z|x; phi)} left[ log p(x|z; theta) right] - mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)}{p(z)} right] end{aligned} $$The second term $ mathbb{E}_{z sim q(z|x)} left[ log frac{q(z|x)}{p(z)} right]$ is the KL divergence between $q(z|x)$ and $p(z)$. Therefore, we can write the ELBO objective as . $$ mathbb{E}_{z sim q(z|x; phi)} left[ log frac{p(x, z; theta)}{q(z|x; phi)} right] = mathbb{E}_{z sim q(z|x; phi)} left[ log p(x|z; theta) right] - D_{KL}(q(z|x; phi) || p(z)) tag{2} $$The above equation is important as it will serve as the objective function for variational autoencoders. Let’s park this here and look at another way to get the same equation for the Variational Lower Bound. . Method 2: Minimizing KL Divergence between $q(z|x; phi)$ and $p(z|x)$ . The main change that we bring about in a variational autoencoder is the approximation ($q(z|x; phi)$) for the true posterior ($p(z|x)$) which we use for sampling. The KL divergence betweeen $q(z|x)$ and $p(z|x)$ is as follows, . $$ D_{KL}(q(z|x; phi)||p(z|x)) = mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)}{p(z|x)} right] $$On using Baye’s rule to replace $p(z|x)$ as $ large frac{p(x|z)p(z)}{p(x)}$ in the above equation, . $$ D_{KL}(q(z|x; phi)||p(z|x)) = mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)}{p(z|x)} right] = mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)p(x)}{p(x|z)p(z)} right] $$We can remove the $p(x)$ term outside as it does not depend on $z$ and take it out of the expectation, . $$ begin{aligned} D_{KL}(q(z|x; phi)||p(z|x)) &amp;= mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)p(x)}{p(x|z)p(z)} right] &amp;= mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)}{p(x|z)p(z)} right] + log p(x) end{aligned} $$On rearranging the terms (take the expectation term from $RHS$ to $LHS$ and using property of logarithms), . $$ log p(x) = mathbb{E}_{z sim q(z|x; phi)} left[ log p(x|z; theta) right] - mathbb{E}_{z sim q(z|x; phi)} left[ log frac{q(z|x; phi)}{p(z)} right] + D_{KL}(q(z|x; phi)||p(z|x)) $$The first two terms on the RHS looks exactly same as the deconstructed ELBO term that we derived in equation 2. And as we know that the KL divergence metric is always greater than equal to 0, we can rewrite the above equation as, . $$ log p(x) geq mathbb{E}_{z sim q(z|x; phi)} left[ log p(x|z; theta) right] - D_{KL}(q(z|x; phi) || p(z)) = ELBO( theta, phi) $$where equality holds when the approximated posterior $q(z|x)$ matches the true posterior $p(z|x)$ (Also seen in Equation 1). . Gradient Descent over ELBO . In summary, maximizing the ELBO objective (a lower bound on $ log p(x)$) will maximize the likelihood. . $$ ELBO() rightarrow mathbb{E}_{z sim q_ phi(z)} left[ log frac{p_ theta(x, z)}{q_ phi(z|x) } right] $$We basically need to find out $ theta$ and $ phi$ s.t . $$ theta^*, phi^* = max_{ theta} sum_{i} max_{ phi} mathbb{E}_{q_ phi} left[ log frac{p_ theta(x, z_i)}{q_ phi(z|x)} right] $$The inner summation is over multiple $z_i$ sampled for each x. So we maximize over $ phi$ and then over $ theta$. We can look at this as a two step process, . $$ phi_{i} leftarrow phi_{i} + alpha nabla_ phi ELBO(x_i, theta, phi_i) theta leftarrow theta + beta nabla_ theta sum_i ELBO(x_i, theta, phi_i) $$The gradients wrt to $ theta$ can be computed easily as the only term that depends on $ theta$ is $p_ theta(x, z_i)$, where $ theta$ is the neural network weights. . $$ nabla_ theta ELBO = nabla_ theta left[ mathbb{E}_{q_ phi} log frac{p_ theta(x, z_i)}{q_ phi(z|x)} right] $$The gradient wrt to $ phi$ can be computed as, . $$ begin{aligned} nabla_ phi ELBO &amp; = nabla_ phi left[ mathbb{E}_{q_ phi} log frac{p_ theta(x, z_i)}{q_ phi(z|x)} right] &amp;= nabla_ phi left[ int q_ phi(z|x)f_ phi(.)dz right] &amp;= int nabla_ phi q_ phi(z|x)f_ phi(.) + q_ phi(z|x) nabla_ phi f_ phi (.)dz end{aligned} $$If we use the log derivative trick ($ nabla p(x) = p(x) nabla log p(x)$), for the first term, . $$ begin{aligned} nabla_ phi ELBO &amp;= int q_ phi(z|x)f_ phi(.) nabla_ phi log q_ phi(z|x) + q_ phi(z|x) nabla_ phi f_ phi (.)dz &amp;= int q_ phi(z|x) left[f_ phi(.) nabla_ phi log q_ phi(z|x) + nabla_ phi f_ phi (.) right]dz &amp;= mathbb{E}_{q_ phi} left[ log frac{p_ theta(x, z)}{q_ phi(z|x)} nabla_ phi log q_ phi(z|x) + nabla_ phi f_ phi (.) right] end{aligned} $$The second term can be removed by . $$ begin{aligned} mathbb{E}_{q_ phi} left[ nabla_ phi f_ phi (.) right] &amp;= mathbb{E}_{q_ phi} left[ nabla_ phi log frac{p_ theta(x, z)}{q_ phi(z|x)} right] &amp;= mathbb{E}_{q_ phi} left[- nabla_ phi log q_ phi(z|x) right] &amp;= - int q_ phi(z|x) nabla_ phi log q_ phi(z|x) dz &amp;= - int q_ phi(z|x) frac{ nabla_ phi q_ phi(z|x)}{q_ phi(z|x)} dz &amp;= - int nabla_ phi q_ phi(z|x) dz &amp;= - nabla_ phi int q_ phi(z|x) dz = - nabla_ phi int q_ phi(z|x) dz = - nabla_ phi (1) &amp;= 0 end{aligned} $$Replace the above change for the right hand side term, . $$ nabla_ phi ELBO = mathbb{E}_{q_ phi} left[ log frac{p_ theta(x, z)}{q_ phi(z|x)} nabla_ phi log q_ phi(z|x) right] $$The emperical form of ELBO can be written as, . $$ text{Emperical Form : } nabla_ phi hat{ELBO} = frac{1}{k} sum_{i = 1}^{k} left[ left( log frac{p_ theta(x, z)}{q_ phi(z|x)} right) nabla_ phi log q_ phi(z|x) right] $$Two conditions would be needed now to to compute this estimate, . We need to be able to sample $z$ | The derivative of $ log q_ phi(z|x)$ exists | Awesome! we now have a method to compute the gradient. . Unfortunately! This poses a problem as well . The gradient using this Monte Carlo estimate has a high variance and we need large number of samples before we can get a decent estimate. As our neural network $q_ phi(z|x)$ which generates a single $z$ after a forward pass with $x$, we would end up with the following issues. . To get multiple z’s is hard, as we are sampling one z per x through the neural network --&gt; Computational Efficiency Problem | To get gradients on $ phi$, we would have to backpropogate through a stochastic node [Look at Fig 3] (Stochastic node as the node represents an entire distribution) | The estimate for the gradient has high variance (refer to this excellently written blog) | Reparametrization Trick . This trick was discussed in the paper Autoencoding Variational Bayes. This proposes an alternative to the expensive sampling process and gives a way that allows for backpropogation through $ phi$. Instead of the neural network directly sampling from the distribution $q_ phi$, instead we sample the distribution statistics itself. Now the sampling process is simplified as follows, . Neural Network $q_ phi$ predicts the mean $ mu$ and standard deviation $ sigma$ of a normal distribution taking input x | Sample multiple $ epsilon$ from a standard normal, $ mathcal{N}(0, I)$ -&gt; Computationally Inexpensive | To get $z$ from $ epsilon$, we use a deterministic differentiable function $T$ s.t. $z = T( epsilon; mu, sigma)$ | Fig 3. Reparametrization Trick Training with ELBO . As we now have the objective function, we can now describe the specifics of the training process (see figure 4), . 1. Encoder for $q(z|x; phi)$​: . An encoder network helps in sampling $z$ from $q(z|x; phi)$. The encoder instead of directly sampling $z$ , outputs the value of mean $ mu$ and variance $ Sigma$ of the distribution $q(z|x)$. | The $ phi$ term in the encoder represents the parameters of the neural network. | In order to now sample from this distribution $q(z|x; phi)$ with the given mean and variance, we sample multiple $z$‘s from $N(0, I)$ and shift and scale them based on the mean and variance derived from the encoder [Reparametrization Trick]. | . 2. Decoder for $p(x|z; theta)$ . Given a $z$ from $q(z|x)$, we can try to get $p(x|z)$ using the decoder network $f(z; theta)$. The decoder network is responsible for predicting the mean of $p(x|z; theta) = N(x | f(z; theta), sigma^2I)$ | . 3. Loss function (ELBO Term) . The ELBO objective is maximized to train the model. The objective is as follows, . $$ ELBO( theta, phi) = mathbb{E}_{z sim q(z|x)} left[ log p(x|z; theta) right] - D_{KL}(q(z|x; phi) : || : p(z)) $$The first term can be seen as the reconstruction error term (maximizing ELBO will minimize the reconstruction loss), . $$ mathbb{E}_{z sim q(z|x)} left[ log p(x|z; theta) right] sim frac{1}{m} sum_j- left[ frac{x - f(z_j; phi)}{2 sigma^2} right]^2 $$The second term can be seen as KL to the prior (maximizing ELBO will decrease the distance between variational approximated posterior $q(z|x; phi)$ and $p(z)$). As both $q(z|x; phi)$ and $p(z)$ are gaussians, the KL term has a closed form expression. . The following image depicts the entire training pipeline of a VAE. . Fig 4. Training a VAE References . Tutorial 5: variational autoencoders | The Expectation Maximization Algorithm A short tutorial | Tutorial on Variational Autoencoders | Why does the reparametrization trick work? |",
            "url": "https://shenoynikhil.github.io/blog/generative%20models/2022/04/01/elbo.html",
            "relUrl": "/generative%20models/2022/04/01/elbo.html",
            "date": " • Apr 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "On Calibration of Modern Neural Networks",
            "content": "While working on deep learning projects, I observed that confidence scores of deep learning models (for classification tasks) were extremely high while the model performed well on metrics like validation accuracy, AUROC, etc. I realized that this was a problem because the confidence score of the model on any out-of-distribution data was over 90%. This was a problem of miscalibration and this post will be an attempt to summarise this paper which tries to understand the topic of calibration in detail. . Introduction to Calibration . Calibration refers to probability estimates of a deep neural network being representative of the true correctness likelihood. For example, given 100 predictions each with a confidence estimate of 0.8, 80 of them should be correctly classified. Therefore, for a perfectly calibrated model, the average accuracy should match the average confidence estimate . While modern neural networks have become more accurate, they have poor calibration. The Figure from the paper compares a 5-layer LeNet (LeCun et al., 1998) with a 110 layer ResNet (He et al., 2016) on CIFAR-100 dataset. Based on the definition of calibration, it is essential that average accuracy of a model matches the average confidence in the best case situation. While LeNet has the average confidence close to the accuracy, the average confidence of a ResNet is much higher than the accuracy. . . This is an issue because an uncalibrated model is incapable of distinguishing samples between in-distribution and out-of-distribution samples. For example, DNNs trained to classify MNIST images often produce high confident probability 91% even for random noise (see the work of (Hendrycks &amp; Gimpel, 2016)). . Methods To Quantify and Visualize Calibration . The following methods are used visualize and quantify calibration. . Reliability diagrams | Expected Calibration Error (ECE) | Maximum Calibration Error (MCE) | We’ll broadly go over the definitions and the code that can be used to implement these methods . Reliability Diagrams : Visual Representation of Model Calibration . . A reliability diagram plots the expected accuracy as a function of confidence. For a finite set of samples, the confidences can be grouped into $M$ bins (each of size $1/M$), and the average accuracy for each group can be calculated accordingly. Let $B_m$ be the set of indices whose predictions falls in the interval $I_m = ( frac{m-1}{M}, frac{m}{M})$, the expected accuracy for that interval would be, $$ acc(B_m) = frac{1}{|B_m|} sum_{i epsilon B_m}1( hat{y_i} = y_i) $$ For a perfectly calibrated model, the expected accuracy for each bin would plot the identity function. Any deviation from the identity function would represent miscalibration. . Expected Calibration Error (ECE) . One notion of miscalibration is the difference in expectation between confidence and accuracy . Expected Calibration Error is a scalar summary statistic of calibration. The mathematical form of it is as follows, $$ E_{ hat{p}}[|P( hat{Y} = Y | hat{P} = p) - p|] $$ An emperical form can be approximated by partitioning predicted confidences into M equally spaced bins (similar to reliability diagrams) and taking a weighted average of the bins’ accuracy/confidence difference. $$ ECE = sum_{i=m}^{M} frac{|B_m|}{n}|acc(B_m) - conf(B_m)| $$ . Maximum Calibration Error (MCE) . For high risk applications where reliable probability estimates are needed, the maximum calibration error is calculated. It is the maximum deviation between bin accuracy and confidence. The exact mathematical form, $$ max_{p epsilon [0, 1]}|P( hat{Y} = Y | hat{P} = p) - p| $$ An emperical form can be approximated similarly to $(3)$, $$ ECE = max_{m epsilon{ {1,...,M }}}|acc(B_m) - conf(B_m)| $$ Note: We can visualize MCE and ECE on reliability diagrams. MCE is the largest calibration gap (red bars) across all bins, whereas ECE is a weighted average of all gaps. For perfectly calibrated classifiers, MCE and ECE both equal 0. . Temperature Scaling . The main contribution of this paper is the technique, Temperature Scaling which is a post training approach to calibrate predictions of a model. We’ll go through some concepts before discussing the exact method which will make it easier to digest temperature scaling. . Softmax Function with Temperature . The softmax function ($ sigma_{SM}$​) usually used as an activation function to go from logits to probabilistic outputs. For instance, for a classification problem involving more than $K &gt; 2$ Classes, the network produces an output logit $z_i$, class prediction $ hat{y_i}$ and confidence score $ hat{p_i}$ for each input $ boldsymbol{x_i}$. The network logits $z_i$ are vectors, where $ hat{y_i} = argmax_k space z_i^{k}$, and $ hat{p_i}$ is derived using the softmax function $ sigma_{SM}$. (The temperature term $T$ is usually set to 1). $$ sigma_{SM}( boldsymbol{z_i})^{(k)} = frac{ exp(z_i^{(k)}/ T)}{ sum_{j=1}^{K} exp(z_i^{(j)}/ T)} $$ Varying the temperature term can make the softmax outputs smoother (higher $T$) or peaky (lower $T$). If $T rightarrow infty $, the softmax function becomes a uniform distribution with the output being $1/K$, whereas if $T rightarrow 0 $, the output becomes a point mass. . Intuition of the method proposed (Temperature Scaling) . The intuition of the method proposed in this paper is as follows. If our model confidence scores are too high (in other words peaky), then it might mean that moving towards a temperature scaling value ($T$) that is higher (reducing the peakiness) might help calibrate the model predictions. . Platt Scaling . This is a parametric approach introduced in paper (Platt et al. 1999) where the non-probabilistic predictions (logit) of a binary classifier are used as features for a logistic regression model, which is trained on the validation set to return probabilities. Basically, Platt Scaling learns scalar parameters $a, space b space large epsilon space mathbb{R}$ and outputs $ hat{q_i}= sigma(az_i + b)$ as the calibrated probability. The loss used is the negative log likelihood (NLL) to tune the scalar parameters. . Temperature Scaling (Extension of Platt Scaling) . This is a simple single parameter extension of Platt Scaling where we aim to learn the temperature paramter $T &gt; 0$ for all the classes in the softmax function. Given the logit vector $z_i$, the calibrated output now becomes, $$ hat{q_i} = max_{k} frac{ exp(z_i^{(k)}/ T)}{ sum_{j=1}^{K} exp(z_i^{(j)}/ T)} $$ where T is optimized with respect to NLL on the validation set. As temperature scaling does not affect the maximum of the softmax, the class prediction $ hat{y_i}$ and accuracy of the model should remain the same. . Why Logistic Regression? . The reason for choosing to fine-tune with a logistic regression model is that, the outputs of a logistic regressor is calibrated. To understand why this is true, let’s first look at the logistic regression setting. . The loss function for logistic regression is the standard negative log likelihood function . $$ J( theta) = - frac{1}{m} sum_{i=1}^{M}[y^{(i)} log(h_{ theta}(x^{(i)})) space + space (1 - y^{(i)}) log{(1 - h_{ theta}(x^{(i)}))}] $$Where we get the output by passing the $ theta^Tx^{(i)}$ through a sigmoid function ($ alpha$ is the bias term), . $$ h_{ theta}(x^{(i)}) = frac{1}{1 + exp(- alpha - sum_j theta_{j}x_j^{(i)})} $$Since we want to minimize the loss function with respect to $ theta$, we take a partial derivative with respect to $ theta$, . $$ begin{aligned} frac{ partial{J( theta)}}{ partial{ theta}} &amp; = - frac{1}{m} sum_{i=1}^{M}[ frac{y^{(i)}}{h_{ theta}(x^{(i)})} - frac{(1 - y^{(i)})}{1 - h_{ theta}(x^{(i)})}] frac{ partial{h_{ theta}(x^{(i)})}}{ partial{ theta}} &amp; = - frac{1}{m} sum_{i=1}^{M}[ frac{y^{(i)} - h_{ theta}(x^{(i)})}{h_{ theta}(x^{(i)})(1 - h_{ theta}(x^{(i)}))}] frac{ partial{h_{ theta}(x^{(i)})}}{ partial{ theta}} end{aligned} $$If we take a partial derivative of the softmax output $h_{ theta}(x^{(i)})$, . $$ begin{aligned} frac{ partial{h_{ theta}(x^{(i)})}}{ partial{ theta}} &amp; = -( frac{1}{1 + exp(- alpha - sum_j theta_{j}x_j^{(i)})})^2 * exp(- alpha - sum_j theta_{j}x_j^{(i)}) * frac{ partial(- alpha- sum_j theta_{j}x_j^{(i)})}{ partial{ theta}} &amp; = h_{ theta}(x^{(i)})(1 - h_{ theta}(x^{(i)})) * frac{ partial(- alpha - sum_j theta_{j}x_j^{(i)})}{ partial{ theta}} end{aligned} $$If we replace the above in the $ frac{ partial{J( theta)}}{ partial{ theta}} $, equation, . $$ frac{ partial{J( theta)}}{ partial{ theta}} = - frac{1}{m} sum_{i=1}^{M}(y^{(i)} - h_{ theta}(x^{(i)}) frac{ partial(- alpha - sum_j theta_{j}x_j^{(i)})}{ partial{ theta}} $$For a fully trained model, as $ frac{ partial{J( theta)}}{ partial{ theta_j}}$ would be $0$ for each $ theta_{j}$, if we look at $ theta_{0} = alpha$ and set $ frac{ partial{J( theta)}}{ partial{ theta_0}} = 0$, . $$ frac{ partial{J( theta)}}{ partial{ theta_j}} = - frac{1}{m} sum_{i=1}^{M}(y^{(i)} - h_{ theta}(x^{(i)}) = 0 $$$$ sum_{i=1}^{M}h_{ theta}(x^{(i)}) = sum_{i=1}^{M}y^{(i)} $$The above expression means that the average sigmoid outputs ($ sum_{i=1}^{M}h_{ theta}(x^{(i)})$) will be equal to accuracy of the model which satisfies the calibration condition. . Entropy Maximization Perspective: Why Temperature Scaling helps increase Entropy? . Our usual training process for a classification problem involves minimizing the cross entropy loss using the predicted probaility $ hat{p_i}$ and the one-hot labels $y_i$. While minimizing this loss, we bring the predicted distribution $ hat{p_i}$ closer to the one-hot true label vector $y_i$ (as minimizing cross entropy is equivalent to minizing KL divergence). . The entropy of the predicted probability ($H( hat{p_i}) = - hat{p_i} space log( hat{p_i})$) is 0 when $ hat{p_i}$ perfectly matches $y_i$ while it is maximum when $ hat{p_i}$ is a uniform distribution. Therefore, temperature scaling will not only help in increasing entropy as we move away from a peaky distribution to a more uniform version of it. Therefore, we can think of this process of temperature scaling/entropy maximization as a form of *regularizationed. . In the figure below, we can see that effect of calibration on the Validation Set (i.e. optimizing T with respect to NLL). Two points to note, . Look at how the blue line indicates the pre-calibration entropy decreasing with epochs (overfitting) and the optimal T increasing (to undo the effect the overfitting). | The post-calibration entropy lies above the pre-calibration entropy line indicating the effect of Temperature Scaling | . .",
            "url": "https://shenoynikhil.github.io/blog/neural-networks/2022/02/05/calibration.html",
            "relUrl": "/neural-networks/2022/02/05/calibration.html",
            "date": " • Feb 5, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "about",
          "content": "",
          "url": "https://shenoynikhil.github.io/blog/https:/shenoynikhil.github.io/",
          "relUrl": "/https:/shenoynikhil.github.io/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shenoynikhil.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}